services:
  auto_gen_config:
    container_name: auto-gen-config.ISDBScanner
    build:
      context: ./autogen-config-with-isdb-scanner
    volumes:
      # ホストのpcscdを使う。これにより、ホストのpcscd.socketを止める必要がなくなる。
      # また、カードリーダーのUSBが物理的に抜けた場合でも、USBを再接続すればコンテナを再起動することなく再認識される。
      - /var/run/pcscd/pcscd.comm:/var/run/pcscd/pcscd.comm
      # MirakurunおよびEDCBの設定ファイル格納ディレクトリをマウント
      - ./mirakurun/conf:/mirakurun-config
      - ./EDCB/edcb/Setting:/edcb-setting
    devices:
      # /dev/bus は必須。これがなければチューナーが認識されない
      - /dev/bus:/dev/bus
      # 以下、チューナーのデバイスファイル
      - /dev/px4video0
      - /dev/px4video1
      - /dev/px4video2
      - /dev/px4video3
      - /dev/px4video4
      - /dev/px4video5
      - /dev/px4video6
      - /dev/px4video7
    logging:
      # ログはjournaldで記録する
      # デフォルトのjson-fileはログが /var/lib/docker/containers/*/*-json.log ファイルに記録される一方、
      # journaldの場合はログが /var/log/ 以下に集約されるため、
      # log2ramやzram-configのような書き込み頻度を抑えてSDカードの寿命を伸ばすソフトウェアが使用しやすい。
      driver: journald
      options:
        tag: dtv-autogen-config
    # いわゆるPID1問題を回避するため、Tiniを使用する
    # see https://zenn.dev/sato_frontend/articles/fc49ffb2fe5dfc
    init: true

  # Note: Mirakurun公式の環境構築手順では、インストール時に `docker compose run --rm -e SETUP=true mirakurun` コマンドを実行している
  #       see https://github.com/Chinachu/Mirakurun/blob/61c4155d2535c56fbf6fd379c5e8aba779fd642b/doc/Platforms.ja.md#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB--%E3%82%A2%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB--%E3%82%A2%E3%83%83%E3%83%97%E3%83%87%E3%83%BC%E3%83%88
  #       しかしソースコードを調査したところ、環境変数 `SETUP=true` は初回起動処理後にMirakurunを終了するための条件分岐のみで使用されている。
  #       see https://github.com/Chinachu/Mirakurun/blob/61c4155d2535c56fbf6fd379c5e8aba779fd642b/src/server.ts#L94-L97
  #       実際に動作検証しても、初回起動時のセットアップ処理は `docker compose up -d` コマンド実行時に自動で行われる。
  #       おそらく `docker compose up -d` コマンドでセットアップ処理を完了させたあと、生成された各種設定ファイルを手動修正させることが目的であるものと考える。
  #       よってこの手順では `docker compose run --rm -e SETUP=true mirakurun` コマンド相当の処理は省略している。
  mirakurun:
    image:
      # このコンテナは常にローカルのDockerfileに基づいて作成されるため、コンテナイメージをpullすることはない。
      # しかしimageがなければ、`docker image`コマンドや`docker ps`コマンドでは自動生成されたコンテナイメージ名が使用される。
      # よって、pull_policyでpullを禁止しつつ、imageも併用する。
      mirakurun
    build:
      context: ./mirakurun
    container_name: Mirakurun
    depends_on:
      auto_gen_config:
        condition: service_completed_successfully
    volumes:
      - ./mirakurun/conf:/app-config
      - ./mirakurun/data:/app-data
      # Note: Mirakurun公式のdocker-compose.ymlでは /var/run と /opt もホストと共有されている
      #       see https://github.com/Chinachu/Mirakurun/blob/61c4155d2535c56fbf6fd379c5e8aba779fd642b/docker/docker-compose.yml#L41-L42
      #       しかし、実際に運用する上でこれらのディレクトリに有用なファイルは記録されているようには見えない。
      #       いちおう公式に従っておくものの、マウントしなくても良いのかもしれない。
      - ./mirakurun/run:/var/run
      - ./mirakurun/opt:/opt
      # ホストのpcscdを使う。これにより、ホストのpcscd.socketを止める必要がなくなる。
      # また、カードリーダーのUSBが物理的に抜けた場合でも、USBを再接続すればコンテナを再起動することなく再認識される。
      - /var/run/pcscd/pcscd.comm:/var/run/pcscd/pcscd.comm
    environment:
      TZ: Asia/Tokyo
      DISABLE_PCSCD: "1"
      DISABLE_B25_TEST: "1"
      DOCKER_NETWORK: host
      # for debug
      LOG_LEVEL: "3"
      DEBUG: true
    network_mode: host
    restart: always
    logging:
      # ログはjournaldで記録する
      # デフォルトのjson-fileはログが /var/lib/docker/containers/*/*-json.log ファイルに記録される一方、
      # journaldの場合はログが /var/log/ 以下に集約されるため、
      # log2ramやzram-configのような書き込み頻度を抑えてSDカードの寿命を伸ばすソフトウェアが使用しやすい。
      driver: journald
      options:
        tag: dtv-mirakurun
    # 削除してもMirakurunは正常に稼働しているように見える。
    # 何のためにある設定値なのか不明。
    # 念の為に公式に従い残しておく。
    cap_add:
      - SYS_ADMIN
      - SYS_NICE
    # 削除してもMirakurunは正常に稼働しているように見える。
    # おそらくコンテナ内のpcscdを使うために必要だが、そうであればこの構成には必要ない。
    # 念の為に公式に従い残しておく。
    device_cgroup_rules:
      - 'c *:* rmw'
    devices:
      # ISDBScannerとは異なり、削除してもチューナーは認識され、Mirakurunも正常に稼働しているように見える。
      # おそらく省略可能だが、念の為に公式に従い残しておく。
      - /dev/bus:/dev/bus
      # 以下、チューナーのデバイスファイル
      - /dev/px4video0:/dev/px4video0
      - /dev/px4video1:/dev/px4video1
      - /dev/px4video2:/dev/px4video2
      - /dev/px4video3:/dev/px4video3
      - /dev/px4video4:/dev/px4video4
      - /dev/px4video5:/dev/px4video5
      - /dev/px4video6:/dev/px4video6
      - /dev/px4video7:/dev/px4video7
    # このコンテナは常にローカルのDockerfileに基づいて作成されるため、
    # コンテナイメージのpullを常に許可しない。
    pull_policy: never
    tmpfs:
      - /tmp

  # EDCBの設定ファイルを作成し、ホストのディレクトリに書き込む
  # Note: 宛先パスが存在しない場合、Dockerはマウント時にファイルがあるべきパスにディレクトリを作成してしまう。
  #       この挙動を回避するため、ホストとコンテナで共有するべき設定ファイルを予めホスト側に作成しておく。
  edcb_create_config:
    image: edcb
    container_name: PrepareEDCB-CreateConfigFiles
    build:
      context: ./EDCB
    command: /usr/local/bin/setup-ini.sh /var/local/host_data/edcb
    volumes:
      - ./EDCB/edcb:/var/local/host_data/edcb
    # このコンテナは常にローカルのDockerfileに基づいて作成されるため、
    # コンテナイメージのpullを常に許可しない。
    pull_policy: never

  edcb_chscan:
    image: edcb
    container_name: PrepareEDCB-ChScan
    build:
      context: ./EDCB
    depends_on:
      mirakurun:
        condition: service_started
      edcb_create_config:
        condition: service_completed_successfully
    network_mode: host
    command: /usr/local/bin/EpgDataCap_Bon -d BonDriver_LinuxMirakc.so -chscan
    volumes:
      - ./EDCB/edcb/Common.ini:/var/local/edcb/Common.ini
      - ./EDCB/edcb/EpgDataCap_Bon.ini:/var/local/edcb/EpgDataCap_Bon.ini
      - ./EDCB/edcb/EpgTimerSrv.ini:/var/local/edcb/EpgTimerSrv.ini
      - ./EDCB/edcb/Setting:/var/local/edcb/Setting
    # このコンテナは常にローカルのDockerfileに基づいて作成されるため、
    # コンテナイメージのpullを常に許可しない。
    pull_policy: never

  edcb:
    image: edcb
    container_name: EDCB
    build:
      context: ./EDCB
    depends_on:
      mirakurun:
        condition: service_started
      edcb_create_config:
        condition: service_completed_successfully
      edcb_chscan:
        condition: service_completed_successfully
    restart: always
    network_mode: host
    volumes:
      - ./EDCB/edcb/Common.ini:/var/local/edcb/Common.ini
      - ./EDCB/edcb/EpgDataCap_Bon.ini:/var/local/edcb/EpgDataCap_Bon.ini
      - ./EDCB/edcb/EpgTimerSrv.ini:/var/local/edcb/EpgTimerSrv.ini
      - ./EDCB/edcb/Setting:/var/local/edcb/Setting
      - ./EDCB/record:/record
    # このコンテナは常にローカルのDockerfileに基づいて作成されるため、
    # コンテナイメージのpullを常に許可しない。
    pull_policy: never
